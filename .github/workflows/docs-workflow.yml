# Reusable Documentation Generation Workflow
# Usage: Copy this to your repository's .github/workflows/docs.yml
# or reference it as a reusable workflow

name: Generate Documentation

on:
  workflow_call:
    inputs:
      repository_name:
        description: "Name of the repository"
        required: true
        type: string
      go_version:
        description: "Go version to use"
        required: false
        type: string
        default: "1.22"
      generate_examples:
        description: "Whether to generate examples documentation"
        required: false
        type: boolean
        default: true
      skip_commit:
        description: "Skip committing generated documentation"
        required: false
        type: boolean
        default: false
      create_pr:
        description: "Create a pull request instead of direct commit (for protected branches)"
        required: false
        type: boolean
        default: false

# Permissions required for auto-committing generated documentation
permissions:
  contents: write
  pull-requests: write

jobs:
  generate-docs:
    runs-on: ubuntu-latest

    steps:
      - name: Debug secret availability
        run: |
          echo "=== ORGANIZATION VARIABLES ==="
          echo "APP_ID (org var): '${{ vars.APP_ID }}'"
          echo "APP_ID available: ${{ vars.APP_ID != '' }}"

          echo "=== REPOSITORY SECRETS ==="
          echo "APP_PRIVATE_KEY available: ${{ secrets.APP_PRIVATE_KEY != '' }}"
          echo "APP_PRIVATE_KEY length: ${#PRIVATE_KEY}"
          echo "First 50 chars: ${PRIVATE_KEY:0:50}..."

          echo "=== CONFIRMATION ==="
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
        env:
          PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Decode GitHub App Private Key
        id: decode
        if: ${{ vars.APP_ID != '' }}
        env:
          PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}
        run: |
          private_key=$(echo "$PRIVATE_KEY" | base64 -d | awk 'BEGIN {ORS="\\n"} {print}' | head -c -2)
          echo "::add-mask::$private_key"
          echo "private_key=$private_key" >> "$GITHUB_OUTPUT"

      - name: Generate GitHub App Token
        id: app-token
        if: ${{ vars.APP_ID != '' && steps.decode.outputs.private_key != '' }}
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ steps.decode.outputs.private_key }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token || secrets.ADMIN_TOKEN || secrets.DOCS_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go_version }}

      - name: Download Kolosys documentation tools
        run: |
          echo "📥 Downloading Kolosys documentation tools..."

          # Create temp directory for tools
          mkdir -p .kolosys-docs

          # Download the shared documentation generator
          curl -sSL https://raw.githubusercontent.com/kolosys/docs/main/shared/scripts/generate-docs.go \
            -o .kolosys-docs/generate-docs.go

          # Download shared templates if they don't exist
          if [ ! -d "docs-templates" ]; then
            echo "📄 Downloading shared templates..."
            mkdir -p docs-templates
            
            # Download common templates
            curl -sSL https://raw.githubusercontent.com/kolosys/docs/main/shared/templates/getting-started.md \
              -o docs-templates/getting-started.md 2>/dev/null || echo "No getting-started template"
            
            curl -sSL https://raw.githubusercontent.com/kolosys/docs/main/shared/templates/installation.md \
              -o docs-templates/installation.md 2>/dev/null || echo "No installation template"
          fi

      - name: Generate documentation configuration
        run: |
          echo "⚙️ Generating documentation configuration..."

          # Create default config if it doesn't exist
          if [ ! -f "docs-config.json" ] && [ ! -f "kolosys-docs.json" ]; then
            echo "📝 Creating default configuration..."
            cat > kolosys-docs.json << EOF
          {
            "repository": {
              "name": "${{ inputs.repository_name }}",
              "owner": "kolosys",
              "description": "Documentation for ${{ inputs.repository_name }}"
            },
            "packages": [
              {
                "name": "${{ inputs.repository_name }}",
                "description": "Main package",
                "priority": 1
              }
            ],
            "docs": {
              "root_dir": ".",
              "docs_dir": "docs"
            },
            "output": {
              "generate_combined_api": true,
              "generate_examples": ${{ inputs.generate_examples }},
              "verbose": true
            }
          }
          EOF
          fi

      - name: Build documentation
        run: |
          echo "🚀 Building ${{ inputs.repository_name }} documentation..."

          # Run the documentation generator (now processes templates automatically)
          go run .kolosys-docs/generate-docs.go

      - name: Verify generated documentation
        run: |
          echo "📋 Checking generated documentation files..."
          ls -la docs/ || echo "No docs directory found"
          if [ -d "docs" ]; then
            echo "📁 Contents of docs directory:"
            find docs -name "*.md" -type f | head -10
            echo "📊 Total markdown files: $(find docs -name "*.md" -type f | wc -l)"
          fi

      - name: Cleanup
        run: |
          # Remove temporary files
          rm -rf .kolosys-docs

      - name: Debug workflow inputs
        run: |
          echo "skip_commit: ${{ inputs.skip_commit }}"
          echo "create_pr: ${{ inputs.create_pr }}"
          echo "event_name: ${{ github.event_name }}"
          echo "ref: ${{ github.ref }}"
          echo "Should create PR: ${{ !inputs.skip_commit && inputs.create_pr && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main' }}"
          echo "Should direct commit: ${{ !inputs.skip_commit && !inputs.create_pr && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main' }}"

      - name: Create Pull Request for generated documentation
        if: ${{ !inputs.skip_commit && inputs.create_pr == true && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main' }}
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ steps.app-token.outputs.token || secrets.ADMIN_TOKEN || secrets.DOCS_TOKEN || secrets.GITHUB_TOKEN }}
          commit-message: |
            📚 Auto-generate documentation from Go source code

            - Updated API documentation
            - Generated examples from source
            - Updated references
          title: "📚 Update documentation for ${{ inputs.repository_name }}"
          body: |
            ## 🤖 Automated Documentation Update

            This PR contains automatically generated documentation updates for **${{ inputs.repository_name }}**.

            ### 📋 Changes Include:
            - 🔄 Updated API documentation from Go source code
            - 📝 Generated examples from source
            - 📚 Updated reference documentation
            - 🎯 Processed shared templates with current configuration

            ### 🚀 Generated by:
            - **Workflow**: ${{ github.workflow }}
            - **Trigger**: ${{ github.event_name }}
            - **Commit**: ${{ github.sha }}

            This documentation is automatically generated and should be safe to merge.
          branch: "docs/update-${{ inputs.repository_name }}-${{ github.run_number }}"
          delete-branch: true
          committer: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
          author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

      - name: Commit generated documentation (direct)
        if: ${{ !inputs.skip_commit && inputs.create_pr == false && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main' }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: |
            📚 Auto-generate documentation from Go source code

            - Updated API documentation
            - Generated examples from source
            - Updated references

            [skip ci]
          file_pattern: "docs/**"
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
          push_options: "--force-with-lease"

      - name: Fallback commit (if auto-commit fails)
        if: ${{ !inputs.skip_commit && inputs.create_pr == false && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main' }}
        run: |
          if git diff --quiet HEAD -- docs/; then
            echo "No documentation changes to commit"
          else
            echo "Committing documentation changes manually..."
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add docs/
            git commit -m "📚 Auto-generate documentation from Go source code

            - Updated API documentation
            - Generated examples from source
            - Updated references

            [skip ci]" || echo "Commit failed or no changes"
            git push || echo "Push failed"
          fi
